import type { TestClient, TestClientMode } from 'viem/clients/createTestClient.js';
import type { Transport } from 'viem/clients/transports/createTransport.js';
import type { ErrorType } from 'viem/errors/utils.js';
import type { Account } from 'viem/types/account.js';
import type { Chain } from 'viem/types/chain.js';
import type { Hex } from 'viem/types/misc.js';
import type { RequestErrorType } from 'viem/utils/buildRequest.js';
export type DumpStateReturnType = Hex;
export type DumpStateErrorType = RequestErrorType | ErrorType;
/**
 * Serializes the current state (including contracts code, contract's storage,
 * accounts properties, etc.) into a savable data blob.
 *
 * - Docs: https://viem.sh/docs/actions/test/dumpState.html
 *
 * @param client - Client to use
 *
 * @example
 * import { createTestClient, http } from 'viem'
 * import { foundry } from 'viem/chains'
 * import { dumpState } from 'viem/test'
 *
 * const client = createTestClient({
 *   mode: 'anvil',
 *   chain: 'foundry',
 *   transport: http(),
 * })
 * await dumpState(client)
 */
export declare function dumpState<TChain extends Chain | undefined, TAccount extends Account | undefined>(client: TestClient<TestClientMode, Transport, TChain, TAccount, false>): Promise<DumpStateReturnType>;
//# sourceMappingURL=dumpState.d.ts.map