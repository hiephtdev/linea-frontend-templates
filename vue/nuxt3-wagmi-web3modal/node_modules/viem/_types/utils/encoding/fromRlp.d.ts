import { type BaseErrorType } from 'viem/errors/base.js';
import { type InvalidHexValueErrorType } from 'viem/errors/encoding.js';
import type { ErrorType } from 'viem/errors/utils.js';
import type { ByteArray, Hex } from 'viem/types/misc.js';
import { type CreateCursorErrorType } from 'viem/utils/cursor.js';
import { type HexToBytesErrorType } from 'viem/utils/encoding/toBytes.js';
import { type BytesToHexErrorType } from 'viem/utils/encoding/toHex.js';
import type { RecursiveArray } from 'viem/utils/encoding/toRlp.js';
type To = 'hex' | 'bytes';
export type FromRlpReturnType<to extends To> = (to extends 'bytes' ? RecursiveArray<ByteArray> : never) | (to extends 'hex' ? RecursiveArray<Hex> : never);
export type FromRlpErrorType = CreateCursorErrorType | FromRlpCursorErrorType | HexToBytesErrorType | InvalidHexValueErrorType | ErrorType;
export declare function fromRlp<to extends To = 'hex'>(value: ByteArray | Hex, to?: to | To | undefined): FromRlpReturnType<to>;
export type RlpToBytesErrorType = FromRlpErrorType | ErrorType;
export declare function rlpToBytes<to extends To = 'bytes'>(bytes: ByteArray, to?: to | To | undefined): FromRlpReturnType<to>;
export type RlpToHexErrorType = FromRlpErrorType | ErrorType;
export declare function rlpToHex<to extends To = 'hex'>(hex: Hex, to?: to | To | undefined): FromRlpReturnType<to>;
export type FromRlpCursorErrorType = BytesToHexErrorType | ReadLengthErrorType | ReadListErrorType | ErrorType;
export type ReadLengthErrorType = BaseErrorType | ErrorType;
export type ReadListErrorType = ErrorType;
export {};
//# sourceMappingURL=fromRlp.d.ts.map