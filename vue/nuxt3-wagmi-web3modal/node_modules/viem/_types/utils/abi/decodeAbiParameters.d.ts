import type { AbiParameter, AbiParametersToPrimitiveTypes } from 'abitype';
import { type AbiDecodingDataSizeTooSmallErrorType, type AbiDecodingZeroDataErrorType, type InvalidAbiDecodingTypeErrorType } from 'viem/errors/abi.js';
import type { Hex } from 'viem/types/misc.js';
import { type ChecksumAddressErrorType } from 'viem/utils/address/getAddress.js';
import { type SizeErrorType } from 'viem/utils/data/size.js';
import { type SliceErrorType } from 'viem/utils/data/slice.js';
import { type TrimErrorType } from 'viem/utils/data/trim.js';
import { type HexToBigIntErrorType, type HexToBoolErrorType, type HexToNumberErrorType, type HexToStringErrorType } from 'viem/utils/encoding/fromHex.js';
import type { ErrorType } from 'viem/errors/utils.js';
import { type GetArrayComponentsErrorType } from 'viem/utils/abi/encodeAbiParameters.js';
export type DecodeAbiParametersReturnType<TParams extends readonly AbiParameter[] | readonly unknown[] = readonly AbiParameter[]> = AbiParametersToPrimitiveTypes<TParams extends readonly AbiParameter[] ? TParams : AbiParameter[]>;
export type DecodeAbiParametersErrorType = AbiDecodingDataSizeTooSmallErrorType | AbiDecodingZeroDataErrorType | DecodeParamsErrorType | SizeErrorType | ErrorType;
export declare function decodeAbiParameters<const TParams extends readonly AbiParameter[] | readonly unknown[]>(params: TParams, data: Hex): DecodeAbiParametersReturnType<TParams>;
type DecodeParamsErrorType = DecodeParamErrorType | SizeErrorType | ErrorType;
type DecodeParamErrorType = DecodeArrayErrorType | DecodeTupleErrorType | DecodeStringErrorType | DecodeBytesErrorType | DecodeNumberErrorType | DecodeAddressErrorType | DecodeBoolErrorType | InvalidAbiDecodingTypeErrorType | ErrorType;
type DecodeAddressErrorType = ChecksumAddressErrorType | SliceErrorType | ErrorType;
type DecodeArrayErrorType = HexToNumberErrorType | SliceErrorType | ErrorType;
type DecodeBoolErrorType = HexToBoolErrorType | ErrorType;
type DecodeBytesErrorType = HexToNumberErrorType | SliceErrorType | ErrorType;
type DecodeNumberErrorType = HexToBigIntErrorType | HexToNumberErrorType | ErrorType;
type DecodeStringErrorType = HexToNumberErrorType | HexToStringErrorType | SliceErrorType | TrimErrorType | ErrorType;
type DecodeTupleErrorType = HasDynamicChildErrorType | HexToNumberErrorType | SliceErrorType | ErrorType;
type HasDynamicChildErrorType = GetArrayComponentsErrorType | ErrorType;
export {};
//# sourceMappingURL=decodeAbiParameters.d.ts.map